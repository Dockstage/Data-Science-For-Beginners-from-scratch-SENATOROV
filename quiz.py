"""Quiz № 1."""

# 1) Как понять, что домашка пришла?
# Если в чате тегнули и написано "прими пул", это значит, что домашка пришла
#
# 2) Как принять домашку?
# Заходим в Github Desktop, нажимаем Fetch Origin. Домашка принимается.
#
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# При нажатии на History появляется история коммитов. При нажатии правой кнопкой мыши на один из коммитов мы видим следующие возможности:
#   1. Amend commit - используется, чтобы изменить последний коммит. То есть вместо создания нового можно, так скажем, перезаписать последний
#   2. Reset to commit - откат ветки до определённого коммита.
#   3. Checkout commit - переключение на определённый коммит.
#   4. Reorder commit - изменение порядка коммитов. Используется, если хочешь «пересобрать» историю, чтобы коммиты шли в другом порядке.
#   5. Revert changes in commit - создаёт новый коммит, который отменяет изменения указанного коммита.
#   6. Create branch from - нужна для того, чтобы создать новую ветку, начиная с выбранного коммита.
#   7. Create Tag - создать тег на выбранном коммите.
#   8. Cherry-pick commit - применить конкретный коммит из другой ветки в текущую.
#   9. Copy SHA - скопировать уникальный хеш коммита.
#   10. Copy tag - скопировать имя тега, который указывает на коммит.
#   11. View on GitHub - открывает страницу выбранного коммита или ветки на GitHub.
#
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# Мы нажимаем правой кнопкой мыши на том коммите, который нам нужен, затем нажимаем на "View on Github" Нас перекидывает на страницу с нашим коммитом в гитхабе. Копируем ссылку и скидываем в чат Телеграмма.
#
# 4) Что такое файл лога?
# Файл, который содержит дату урока и информацию о том, что было сделано.
#
# 4.1) Когда нужно его пушить?
# В понедельник, среду и пятницу.
#
# 5) Что такое интерпритатор?
# Интерпретатор - это программа, которая читает и запускает наш код.
#
# 6) Где можно выбрать интерпритатор?
# Нажимаем на запуск кода внутри ячейки (либо же справа для запуска всех ячеек), потом "Select Another Kernel", затем "Python Environments" и выбираем там, где будет надпись "anaconda"
#
# 7) Что такое модуль?
# Файл формата .py или .ipynb.
#
# 8) Как создать и отправить коммит?
# Заходим в Github Desktop ("кошечку"), пишем название коммита и описание (по желанию), нажимаем "Commit to main", а затем "Push origin".
#
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# Нажимаем правой кнопкой мыши на наш новый коммит, затем нажимаем "View on GitHub" и на сайте гитхаба мы можем увидеть наш коммит, что он передался и всё хорошо.
#
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# pre-commit run --all-files
#
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
#     1. flake8 - проверяет стиль кода Python на соответствие стандарту PEP8 и находит типичные ошибки.
#     2. pylint - проводит глубокий анализ кода, выявляет ошибки, проблемы стиля и выдает оценку качества.
#     3. mypy - статический анализатор типов, проверяет соответствие аннотаций типов в коде.
#     4. pydocstyle - проверяет правильность и оформление docstring-документации.
#     5. codespell - находит орфографические ошибки и опечатки в коде и комментариях.
#     6. pyupgrade - обновляет код до современного синтаксиса Python.
#
#     Отдельно можно выделить инструменты автоформатирования. Это, конечно, не линтеры, но используются вместе.
#
#     1. black - автоматически форматирует Python-код по единому стилю (PEP8).
#     2. isort - сортирует импорты в Python-файлах (по алфавиту и группам).
#     3. docformatter - форматирует docstring’и по стандартам (например, добавляет точки, выравнивает отступы).
#     4. jupytext - синхронизирует Jupyter Notebook с .py или .md файлами, чтобы можно было использовать Git.
#     5. nbqa-... - специальные версии инструментов (black, flake8, mypy и т. д.) для проверки Jupyter Notebook файлов.
#
# 11) Как узнать какой именно линтер не прошёл проверку?
# При запуске в терминале команды "pre-commit run --all-files" можно будет увидеть, какие из линтеров прошли проверку, а какие - нет. Напротив тех, что не прошли, будет написано "Failed".
#
# 12) Линтер Pylint видит markdown?
# Нет, PyLint не видит markdown.
#
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# Да, ячейки в терминале и номер ячейки в vs code может отличаться. И как раз в том случае, когда какие-то из этих ячеек формата Markdown (причина в 12 пункте)
#
# 14) Где посмотреть номер ячейки в vscode?
# Номер ячейки в VS Code можно посмотреть снизу справа.
#
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# .ipynb - это не бинарный формат, а обычный текстовый файл в формате JSON. И в гитхаб он отправляется в точно таком же формате.
#
# 16) Где посмотреть в какой ячейке ошибка?
# После выполнения команды "pre-commit run --all-files" в тех строчках терминала, где будет написано "Failed", можно увидеть, какой линтер выдал ошибку, номер этой ошибки и причину, по которой эта ошибка вылезла. А в документации этого линтера или в беседе школы можно по коду ошибки найти способ исправления.
#
# 17) Как запустить терминал?
# Слева сверху есть кнопка "Terminal". Нажимаешь на неё, а затем нажимаешь на "New Terminal". Ну либо же сочетанием клавиш Ctrl + Shift + `.
#
# 18) Что такое линтер?
# Линтер - это программа, которая проверяет ваш файл на корректность.
#
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# https://pylint.readthedocs.io/en/stable/
#
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# Pylint
#
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# Да, всё верно. Описание модуля должно содержать в себе информацию о том, какую роль выполняет этот модуль, что в нём содержится.
#
# 22) С какой  git команды начинается утро программиста?
# git pull
#
# 23) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# Наводим на "Current Repository", нажимаем правой кнопкой мыши и там будет "Open in VS Code"
#
# 24) Что такое stash? Общее объяснение концепции.
# Стэш - это некий буффер, куда мы временно прячем файлы, чтобы принять pull. То есть можно рассмотреть такую ситуацию: вот программист рабоатет над какой-то фичей. Но вдруг ему нужно переключиться срочно на другую ветку, а закоммитить текущий вариант кода нельзя (так как очень сырой вариант, например, или совсем нерабочий). В такой момент можно прописать "git stash 'name'" и git сохранит весь этот сырой, нерабочий код во временное хранилище.
#
# 24.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531): git stash save "NAME_STASH"
#
#   Кнопка в vs code: В видео не был показан способ именно для vs code'а. Там было показано, как это сделать через "кошку", а именно если мы попробуем нажать "Pull origin" в том случае, когда над одним файлом работало несколько человек и они вносили изменения в одном и том же месте, то вылезет окошко с предупреждением. В этом же окошке будет кнопка "Stash changes and continue". Достаточно нажать на неё и все локаьные изменения сохранятся в буффер обмена, а принимаются изменения с Интернета.
#   Если мы говорим всё же именно про VS Code, то в интернете я нашёл такой способ: нажимаем на Source Control, затем выбираем файл, в котором вносились изменения, нажимаем на него правой кнопкой мыши, находим Stash и нажимаем Stash (Include Untracked).
#
# 24.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?: В кошечке в той части, где мы пишем название коммита, появляется кнопка "Stashed Changes". Нажимаем на неё, переходим во вкладку "Stashed Changes" и нажимаем кнопку "Restore"
#
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?: git stash apply "NUMBER_STASH"
#
# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
#
#   Коммит - это сохранение изменений в истории репозитория. Он хранится в истории опредеделённой ветки. Он нужен для того, чтобы фиксировать готовый шаг разработки (логически завершённую часть работы).
#   Стэш - это временное сохранение текущих изменений (что-то по типу «черновика»). Он хранится в отдельном списке (не в имстории ветки). В нём можно быстро спрятать изменения, чтобы переключиться на другую задачу или ветку, а потом вернуть их.
#   По сути, основным различием является то, что коммит попадает в историю проекта, а стэш - во временное хранилище. Его не видно в истории, при желании его можно потом "выкинуть".
#
#   Коммит используют тогда, когда изменения представляют собой законченную часть работы. Это может быть исправленная ошибка, реализованная функция или обновлённая документация - что-то, что имеет смысл сохранить в истории проекта навсегда. Коммиты формируют хронологию разработки, и по ним можно будет потом понять, что и зачем менялось, откатиться назад или поделиться результатом с другими участниками команды. Поэтому коммит - это всегда про фиксирование осмысленного шага.
#
#   Стэш же нужен в ситуациях, когда изменения ещё сырые и не готовы становиться частью истории.
#
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531): git stash list
#
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#   1) git stash drop stash@{N} - удаляет конкретный стэш
#   2) git stash clear - удалить все stash сразу
#
#
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
#
#   Ну, можно такой пример привести. Ты работаешь над новой функцией в ветке, пишешь код, но внезапно от вышестоящих каких-то ребят прилетает задача: срочно починить баг в main. Коммитить недописанную функцию не хочется, потому что в историю попадёт сырой код. В этом случае делаешь git stash, переключаешься на main, фиксишь баг, коммитишь. Потом возвращаешься в свою ветку и делаешь git stash pop, чтобы вернуть свои наработки.
#
# 24) Где посмотреть что есть конфликт в файлах?
# Можно посмотреть в кошечке, а также нажать на коммит правой кнопкой мыши, затем нажать "Open in VS Code" и тогда можно будет посмотреть конфликт в самом VS Code.
#
# 24.1) Когда он появляется?
# Пример из видео: предположим, два человека работают в одном файле. То есть один зашёл, что-то написал в файле, затем другой зашёл и тоже что-то в нём написал. И кто-то из них решил закоммитить. Другой человек принимает эти изменения у себя и сталкивается с конфликтом.
#
# 25) Как решить конфликт в файлах?
# В кошечке правой кнопкой мыши нажимаем на коммит, затем на "Open in VS Code". Открывается Visual Studio с нашим коммитом. У нас есть 3 варианта решения конфликта:
#     1) Accept Current Change - примется зелёная штучка (то, что пришло с Интернета) (чаще всего нужно нажимать на него)
#     2) Accept Incoming Change - примется то, что на компьютере, но изменения с Гитхаба не примутся (нежелательно)
#     3) Accept Both Change - принять оба изменения
#     4) Просто вручную изменить всё и затем нажать "Resolve in Merge Editor"
#
# 26) Напишиие правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
#
# Зелёное то что пришло с гитхаба и синее локальные изменения
#
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# Да, после того, как мы в кошечке нажмём "Stash chamges and continue", локальные изменения сохранятся в буфер обмена и затем принимаются с Интернета изменения
#
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# После восстановления гит начинает не понимать, какие изменения сохранить: те, что пришли с Гитхаба или локальные и из-за этого возникают конфликты.
#
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# Указал их в пункте 25, но напишу ещё раз. Вариантов 4:
#     1) Accept Current Change - примется зелёная штучка (то, что пришло с Интернета) (чаще всего нужно нажимать на него)
#     2) Accept Incoming Change - примется то, что на компьютере, но изменения с Гитхаба не примутся (нежелательно)
#     3) Accept Both Change - принять оба изменения
#     4) Просто вручную изменить всё и затем нажать "Resolve in Merge Editor"
#
# 29) Что делает кнопка complete merge?
# Сначала помечает все конфликты как решённые (если и правда всё хорошо уже), а затем завершает процесс слияния, то есть можно сделать коммит, который зафиксирует результат объединения.
#
# 30) В какой чат нужно писать если остались вопросы?
# В "HELP ME"
#
# 31) Что такое FORK? Зачем его делают?
# Fork - это копия чужого репозитория, созданная в аккаунте на GitHub. Его делают для того, чтобы взять какой-то проект (готовый или находящийся в процессе разработки, не важно) и внести какие-то изменения или добавить функционал. То есть если у тебя нет прав на запись в оригинальный репозиторий, логично, что ты не можешь туда напрямую пушить код. Поэтому делают форк и в нём уже есть все права. Можно внести изменения, а потом отправить pull request в оригинальный проект.
#
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# В кошечке нажимаем "Clone repository", выбираем репозиторий из списка и нажимаем "Clone".
#
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# С вероятностью 90% ошибки были решены либо Русланом, либо студентами
#
# 34) Как создать файл в vs code?
# Чуть выше той части, где расположены все файлы, есть листочек с плюсиком. При нажатии на неё создаётся файл. Остаётся только назвать его
#
# 35) Файл лога нужно заполнять в конце каждого урока?
# Да. Должна быть дата урока и что мы запомнили в течение урока
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# jupyter nbconvert --to python <YourNotebook>.ipynb
# подсказка https://t.me/c/1937296927/1/26527
#
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# Пакетный менеджер — это инструмент, который автоматизирует установку, обновление и управление библиотеками (пакетами) и их зависимостями.
#
# Pip - cтандартный пакетный менеджер для Python. Он устанавливает пакеты из PyPI. Работает в связке с виртуальными окружениями. Но его недостаток в том, что он не управляет системными зависимостями (например, библиотеками C, которые нужны некоторым Python-пакетам).
#
# Conda - это более универсальный менеджер. Он управляет и Python-библиотеками, и системными зависимостями. Создаёт свои изолированные окружения. Имеет собственный репозиторий Anaconda/conda-forge, где часто есть готовые бинарные сборки для сложных пакетов (например, numpy, pandas, scikit-learn, tensorflow, pytorch).
#
# Для Data Science/ML чаще рекомендуют conda, потому что многие тяжёлые библиотеки (TensorFlow, PyTorch, scikit-learn) удобнее ставить через conda. Да и в целом, проще управлять окружениями и меньше проблем с зависимостями и компиляцией C-кода.
#
# 3) Почему расширение py лучше чем ipynb?
#     1. В .ipynb много метаданных в формате JSON, что делает его неудобным для хранения в Git
#     2. В .py легко сравнивать изменения (git diff), в то время как у .ipynb диффы часто "забиты" JSON-структурой.
#     3. .py можно импортировать как модуль (import my_module) и переиспользовать функции/классы. .ipynb для этого не предназначен.
#     4. Линтеры, тесты, форматтеры (flake8, pylint, black, pytest) ожидают .py, а не .ipynb.
#
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
# PEP 8 (Python Enhancement Proposals) — это официальный руководство по стилю (Style Guide) для кода на Python. Он нужен для того, чтобы сделать код читаемым, единообразным и понятным для других разработчиков. Оно содержит рекомендации про отступы, длину строк, пробелы, имена переменных, оформление импортов и др.
#
# 4.1) линтеры проверяют на соблюдение pep8?
# Да, многие линтеры проверяют соответствие кода правилам PEP 8 (ну, по крайней мере, Pylint и Flake8 точно, за другие сказать не могу).
#
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# Используется snake_case (везде маленькие буквы, слова разделяются подчёркиваниями).
#
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# Да, может. Это допустимое имя в Python. Часто символ "_" используют, когда значение переменной не важно, его не собираются использовать. Это, например, может быть в циклах:
# for _ in range (n).
# У нас нет необходимости в какой-либо переменной, нам просто нужно запустить цикл, в котором эта переменная сама по себе никакое участие не принимает.
#
# 4.4) Зачем и где мы используем андерскор _
#     1. Первая причина была объяснена 4.2. То есть мы, создавая перменную (или название функции, метода), используем snake_case. И, тем самым, если в названии переменной больше одного слова, то разделяем их через андерскор
#     2. Про вторую причину было описано в пункте 4.3 (игнорируемая переменная)
#     3. Одиночный андерскор в начале переменной. Это уже ООП часть Python. Ставя этот знак, мы показываем, что переменная или функция является внутренней, «не публичной». Да, это не какой-то супер запрет. Это, скорее, некий намёк программисту, что не стоит использовать этот объект извне.
#     4. Двойной андерскор в начале переменной - это уже что-то ближе к private в Java и C++. Но тут тоже сомнительно, конечно. Не знаю, как это объяснить нормально, но сейчас попробую. Предположим, что у нас есть переменная "secret" и мы к ней добавляем двойное подчёркивание. И так, мы имеем переменную "__secret". В таком случае Python автоматически переименует её внутри в _ClassName__secret. Попробую показать на примере с кодом:
#
#     class MyClass:
#     def __init__(self):
#         self.__secret = 42
#
#     obj = MyClass()
#     print(obj.__secret)
#     print(obj._MyClass__secret)
#
#     Смотрите, в случае с первым принтом выведется ошибка. Во втором же случае всё сработает. То есть, если говорить по простому и не расписывать это всё долго, то прямой доступ к __secret запрещён, но обойти это всё равно можно, если знать «настоящие» имя.
#
#     5. Ну и ещё знаю про магические методы - базовые встроенные методы в Python. Они выделяются с двух сторон двойным подчёркиванием.
#
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#
# Ну, вообще, прям строгого запрета нет на это. Но тут по-хорошему внести некоторые уточнения:
#     1. Временные переменные мы спокойно можем обозначить одной буквой (например, в цикле i, j, k).
#     2. Но при этом стоит понимать, что нельзя использовать такие имена для «важных» переменных, которые несут смысл в коде - это ухудшает читаемость.

# **quiz № 2**
#
#
# 1. Как включить автосохранение данных в VSCODE?
# В левом верхнем углу нажимаем "File" и в появившемся окошке нажимаем "Auto Save"
#
#
# 2. Как настроить перенос строки?
# В левом верхнем углу нажимаем "File", в появившемся окне наводим на "Preferences", затем нажимаем на "Settings". В появившемся окошке в поиске пишем "Wrap" и первую настройку выставляем "wordWrapColumn".
#
#
# 3. Сколько символов по pep8 разрешено на строке?
# 79
#
#
# 4. Какие способы переноса строк показаны в видео:
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки (ПОКАЗАН В ВИДЕО)
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью + (ПОКАЗАН В ВИДЕО)
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# В нижней части VS Code есть окошечко, где обычно что-то вводят в терминал. Там и находится эта кнопка. Также, кроме неё, там можно увидеть "OUTPUT", "DEBUG CONSOLE", "TERMINAL", "PORTS", "GITLENS", "JUPYTER", "COMMENTS"
#
#
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# Он находится в левой части VS Code. Чтобы отдать коммит, нажимаем на "Source Control" и там уде будет место, где мы вводим название коммита, выбираем необходимые файлы и можем либо отдельо нажать на коммит, а потом нажать на "три точки" чуть выше и нажать "Push", либо там, где кнопка "Commit", есть стрелочка вниз. Нажимаем на неё и затем нажимаем "Commit & Push". Чтобы принять домашку, нажимаем на "три точки" и затем нажимаем "Pull".
#
#
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# Git - это система контроля версий. Её основная задача - отслеживать изменения в файлах (обычно в исходном коде) и помогать работать над проектом нескольким людям одновременно, не теряя историю изменений.
# Да, Git - локальный по своей сути, то есть он работает на компьютере даже без интернета.
# Да, в нём можно посмотреть историю изменений файлов и вернуться к любому коммиту
#
# 8. Как вставить картинку в маркдаун?
# Через ctrl + v вставляем картинку (соответственно, перед этим копируем её) и в ячейке нажимаем на галочку.
#
#
# 9. Где посмотреть длину строки в vs code?
# В нижней части VS Code, посередине.
#
#
# 10. Как поменять тип ячейки с питона на маркдаун?
# В созданной ячейке в нижнем правом углу есть местечко. Мы нажимаем туда и можем выбрать Markdown.
#
#
# 11. Как запустить сразу все ячейки в юпитере?
# Нажимаем на кнопку "Run all" в верхней части VS Code.
#
#
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# Да, небольшое знание html нужно. Каринку нужно поместить в тег `<img>`. Условно говоря, можно написать нечто такое:
# `<img src="image.png" width="200" height="100"> `
# То есть мы сами задали ширину и высоту этой картинки.
#
#
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# Shift + Enter.
#
#
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# Нажимаем на "три точки" внутри ячейки, затем на "Show Cell Line Numbers"
#
#
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# При нажатии на "Go To" нас автоматически перекидывает на ошибочную ячейку. То есть если мы нажмём на "Run all" и у нас где-то будет ошибка, "Go To" нам поможет сразу увидеть, где эта ошибка.
#
#
# 16. Как очистить вывод ячеек которые уже запущены?
# Там же, где "Run all", есть кнопка "Clear All Outputs". Нажимаем на неё и всё очистится.
#
#
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# В верхнем правом углу, слева от "трёх точек", есть иконка квадратика, разделённого пополам. При нажатии на неё появляется возможность одновременно работать в двух файлах. Это очень удобно. С одной стороны может быть открыта какая-то книжка, а с другой код.
#
#
# 18. Каким сочетанием убирается левый сайдбар?
# Ctrl + B, либо нажимаем на активное окно слева.
#
#
# 19. Кнопка два листочка это наши локальные файлы?
# Да. Там находятся всевозможные папки и файлы, которые есть у нас локально.
#
#
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# NameError: name "Dict" is not defined.
#
#
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и  https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# Да.
#
# 22. Что такое валидация?
# Валидация - это процесс проверки соответствия данных, процессов, моделей или продуктов установленным требованиям, стандартам и критериям качества. Простыми словами, валидация - это подтверждение того, что продукт, система или процесс будут функционировать должным образом и удовлетворять ожидания пользователей.
#
# В нашем случае под валидацией мы понимаем процесс проверки кода на отсутствие ошибок. То есть вот мы запустили все ячейки и если не выпало никакой ошибки, значит валидация прошла успешно.
#
#
# 23. Что такое трассировка ошибки?
# Это визуал ошибки. Он может показаться после валидации
#
#
# 24. Что значит отвалился интерпритатор?
# То есть при запуске кода останавливается выполнение программы на том месте, где была обнаружена ошибка.
#
#
# Отвечаете на вопросы в вашем редакторе кода.
