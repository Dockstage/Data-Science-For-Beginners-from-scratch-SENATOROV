"""Issue № 4."""

# 1. Что такое CPython и чем он отличается от Python?
# Это одна из 6 реализации Python и наиболее широко используемая. Он написан на C. Также это не только ЯП, а ещё и интерпретатор. CPython'ом мы пользуемся на данный момент.
# Отличие от Python состоит в том, что Python - это язык программирования, а CPython - это одна из реализаций этого ЯП.
#
# 2. Сколько существует реализаций Python, и какая из них самая популярная?
# Существует всего 6 реализаций: CPython, IronPython, Jython, PyPy, Brython, Nuitka. Среди низ CPython является самым популярным.
#
# 3. На каком языке написан CPython?
# Он написан на языке C.
#
# 4. (опционально) Кто создал CPython?
# Гвидо ван Россум
#
# 5. Почему Python считается быстрым, несмотря на то, что это интерпретируемый язык?
# Потому что Python написан на языке C.
#
# 6. Напишите путь к Интерпретатору CPython на вашем компьютере
# D:\Programming\Python\cpython-3.11.12\PCbuild\amd64\python.exe
#
# (на диске C нет места, поэтому пришлось ставить на диск D)
#
# 7. Что содержится в папке include в CPython?
# В данной папке находятся файлы заголовков на языке C, необходимые для использования Python. Эти файлы устанавливаются вместе с интерпретатором Python и используются в коде, написанном на языке C, для доступа к интерпретатору Python на разных уровнях.
#
# 8. Где можно найти исходный код CPython дайте ссылку на репозиторий гитхаб
# https://github.com/python/cpython
#
# 9. (опционально) Как работает интерпретатор CPython при выполнении кода?
# По факту, у нас 3 основных шага:
#
#     1) Лексический и синтаксический анализ
#     2) Компиляция в байт-код
#     3) Выполнение байт-кода виртуальной машиной
#
# 10. Какая команда используется для запуска файла с помощью CPython?
# python имя_файла.py.
#
# 11. Можно ли запускать текстовые файлы через интерпретатор Python? Почему?
# Можно, если сам txt файл содержит в себе Python код.
# Интерпретатору без разницы. Он читает некую последовательность символов и выполняет их как команды в Python.
#
# 12. Как указать путь к интерпретатору и файлу для выполнения кода?
# Находим файл на компьютере, нажимаем на него правой кнопкой мыши, заходим в свойства и находим расположение файла. Копируем путь и вставляем в командную строку.
#
# 13. Чем PyPy отличается от CPython?
# Работает быстрее за счёт JIT-компиляции.
#
# 14. Почему PyPy не может использоваться для всех проектов на Python?
# Он достаточно новый, поэтому не совместим со всеми проектами (библиотеками)
#
# 15. Где можно скачать PyPy?
# https://pypy.org/download.html
#
# 16. Как установить PyPy после скачивания?
# Достаточно просто распаковать архив
#
# 17. Как запустить файл с помощью PyPy?
# Также, как и в случае с CPython. Открываем командную строку и сначала пишем путь к интерпретатору PyPy, а затем путь к файлу, в котором у нас находится код. Нажмаем Enter и всё.
#
# 18. Почему PyPy выполняет код быстрее, чем CPython?
# Как было упомянуто выше, PyPy выполняет код быстрее, чем CPython благодаря использованию JIT-компиляции - компиляции «точно в срок» (just-in-time). То есть часто исполняемые участки кода компилируются в машинный код на лету, в то время как CPython интерпретирует код напрямую.
#
# -----------------------------------------------------------------------------------------------------------------------------------------------------
#
# Практическая часть!
#
# 1. Поиск и установка CPython. Проверьте, установлен ли CPython на вашем компьютере:
# Используйте поиск в меню "Пуск" (Windows) или терминале (Linux/Mac).
# Введите команду python --version или python3 --version в терминале.
# Если CPython не установлен, скачайте его с официального сайта Python https://www.python.org/downloads/ и установите.
#
# При вводе команды "python --version" вывелось сообщение: "Python 3.10.10" (хоть у меня сейчас установлена версия 3.11.12, но в переменной PATH у меня путь к 3.10.10, поэтому именно она и отображается)
#
# 2. Исследование структуры CPython
# Найдите папку, где установлен Python (например, через команду which python в терминале или свойства ярлыка).
# Откройте папку include и изучите её содержимое. Какое количество файлов на C там есть?
# 76
#
# Перейдите на [GitHub-репозиторий CPython](https://github.com/python/cpython) и найдите файл README. Прочитайте информацию о проекте.
# Сделано
#
# 3. Запуск файла с помощью CPython
# Создайте текстовый файл example.txt с содержимым:
# print("Hello from CPython!")
# Запустите файл через команду python <путь_до_файла> (замените <путь_до_файла> на фактический путь к вашему файлу).
# Проверьте, что выводится на экран. Попробуйте изменить расширение файла на .py и повторите запуск.
#
# Так как в переменной PATH у меня версия Python 3.10.10, а для прохождения этого курса в видео Руслан скачал версию python 3.11.12, то я не могу написать просто python, поэтому задаю именно путь к интерпретатору, а затем путь к файлу.
#
# D:\Programming\Python\cpython-3.11.12\PCbuild\amd64\python.exe C:\Users\gagik\Desktop\example.txt
#
# После нажатия Enter показывается заветная надпись:
#
# Hello from CPython!
#
# Меняем txt на py:
# D:\Programming\Python\cpython-3.11.12\PCbuild\amd64\python.exe C:\Users\gagik\Desktop\example.py
#
# Всё также замечательно работает. Выводится та же надпись.
#
# 4. Установка и использование PyPy
# Перейдите на [официальный сайт PyPy](https://www.pypy.org/) и скачайте подходящую версию для вашей операционной системы.
# Распакуйте скачанный архив в удобное место.
# Создайте файл example_pypy.py с кодом:
# print("Hello from pypy!")
#
# Запустите файл через PyPy
# pypy <путь_до_файла> (замените <путь_до_файла> на фактический путь к вашему файлу).
# Проверьте, что выводится на экран. Попробуйте изменить расширение файла на .py и повторите запуск.
#
# Исходя из логики, описанной мною в предыдущем задании, открываю командную строку и пишу следующее:
#
# D:\Programming\Python\pypy3.11-v7.3.20-win64\python.exe C:\Users\gagik\Desktop\example_pypy.txt
#
# Всё отрабатывает хоорошо и выводится надпись: "Hello from pypy!"
#
# Меняю расширение с txt на py. Ввожу следующую команду:
#
# D:\Programming\Python\pypy3.11-v7.3.20-win64\python.exe C:\Users\gagik\Desktop\example_pypy.py
#
# Точно также всё хорошо отрабатывает и выводится надпись: "Hello from pypy!"
#
# 5. Сравнение производительности CPython и PyPy
#
# Создайте файл performance_test.py с кодом:
#
# import time
# start_time = time.time()
# total = 0
# for i in range(1, 10000000):
#     total += i
# end_time = time.time()
#
# print("Result:", total)
# print("Execution time:", end_time - start_time, "seconds")
#
# Запустите этот файл сначала через CPython, а затем через PyPy. Запишите результаты времени выполнения для обоих интерпретаторов.
# Сделайте вывод о разнице в производительности.
#
#     1) Для CPython ввёл такую команду:
#     D:\Programming\Python\cpython-3.11.12\PCbuild\amd64\python.exe C:\Users\gagik\Desktop\performance_test.py
#
#     Результаты:
#     Result: 49999995000000
#     Execution time: 0.8943018913269043 seconds
#
#     2) Для PyPy ввёл такую команду:
#     D:\Programming\Python\pypy3.11-v7.3.20-win64\python.exe C:\Users\gagik\Desktop\performance_test.py
#
#     Результаты:
#     Result: 49999995000000
#     Execution time: 0.01563882827758789 seconds
#
# Вывод: PyPy быстрее CPython примерно в 57 раз.
